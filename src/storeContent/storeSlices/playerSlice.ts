/* eslint-disable no-param-reassign */
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";

export interface Player {
  id: number;
  isChecked: boolean;
  firstName: string;
  lastName: string;
  strength: number;
  comment: string;
}

interface PlayerSliceState {
  players: Player[];
}

const initialState: PlayerSliceState = {
  players: [
    {
      id: -1,
      isChecked: false,
      firstName: "allPlayers",
      lastName: "allPlayers",
      strength: 0,
      comment: "no commentAllPlayers",
    },
    // {
    //   id: 0,
    //   isChecked: false,
    //   firstName: "bubba0",
    //   lastName: "smith0",
    //   strength: 0,
    //   comment: "no comment0",
    // },
    // {
    //   id: 1,
    //   isChecked: false,
    //   firstName: "bubba1",
    //   lastName: "smith1",
    //   strength: 1,
    //   comment: "no comment1",
    // },
    // {
    //   id: 2,
    //   isChecked: false,
    //   firstName: "bubba2",
    //   lastName: "smith2",
    //   strength: 2,
    //   comment: "no commen2",
    // },
    // {
    //   id: 3,
    //   isChecked: false,
    //   firstName: "bubb3",
    //   lastName: "smith3",
    //   strength: 3,
    //   comment: "no comment3",
    // },
    // {
    //   id: 4,
    //   isChecked: false,
    //   firstName: "bubba4",
    //   lastName: "smit4",
    //   strength: 4,
    //   comment: "no comment4",
    // },
  ],
};

export const fetchPlayers = createAsyncThunk(
  "players/get",
  async (thunkApi) => {
    const response = await fetch("http://localhost:8080/api/data/players", {
      method: "GET",
    });
    const data = response.json();
    return data;
  }
);

// export const savePlayer = createAsyncThunk(
//   "playerSave",
//   async (firstName: string, thunkApi) => {
//     const response = await fetch("http://localhost:8080/api/data/players", {
//       method: "PUT",
//       headers: {
//         "Content-Type": "application/json",
//       },
//       body: JSON.stringify({ firstName }), // id will be auto-generated by the db
//     });
//     const data = await response.json();
//     return data;
//   }
// );

export const PlayerSlice = createSlice({
  name: "player",
  initialState,
  reducers: {
    addPlayer: (
      state,
      action: PayloadAction<{
        firstName: string;
        lastName: string;
        strength: number;
        comment: string;
      }>
    ) => {
      state.players = [
        ...state.players,
        {
          id: state.players.length,
          isChecked: false,
          firstName: action.payload.firstName,
          lastName: action.payload.lastName,
          strength: action.payload.strength,
          comment: action.payload.comment,
        },
      ];
    },
    checkPlayer: (
      state,
      action: PayloadAction<{
        id: number;
        isChecked: boolean;
      }>
    ) => {
      state.players = state.players.map((player) =>
        player.id !== action.payload.id
          ? player
          : { ...player, isChecked: action.payload.isChecked }
      );
    },
    checkAllPlayers: (
      state,
      action: PayloadAction<{
        isChecked: boolean;
      }>
    ) => {
      state.players = state.players.map((player) => ({
        ...player,
        isChecked: action.payload.isChecked,
      }));
    },
    updatePlayer: (
      state,
      action: PayloadAction<{
        idToEdit: number;
        firstName: string;
        lastName: string;
        strength: number;
        comment: string;
      }>
    ) => {
      state.players = state.players.map((player) => {
        if (player.id === action.payload.idToEdit) {
          return {
            id: player.id,
            isChecked: player.isChecked,
            firstName: action.payload.firstName,
            lastName: action.payload.lastName,
            strength: action.payload.strength,
            comment: action.payload.comment,
          };
        }
        return {
          ...player,
        };
      });
    },
  },
  extraReducers: (builder) => {
    builder.addCase(fetchPlayers.fulfilled, (state, action) => {
      state.players = action.payload;
      console.info("fetch promise fulfilled");
    });
    builder.addCase(fetchPlayers.rejected, () => {
      console.warn("fetch promise rejected!");
    });
    builder.addCase(fetchPlayers.pending, () => {
      console.info("fetch promise pending...");
    });
    // builder.addCase(savePlayer.fulfilled, (state, action) => {
    //  state.players.push(action.payload);
    //  console.info("save promise fulfilled");
    // });
    // builder.addCase(savePlayer.rejected, () => {
    //   console.warn("save promise rejected!");
    // });
    // builder.addCase(savePlayer.pending, () => {
    //   console.info("save promise pending...");
    // });
  },
});

export default PlayerSlice.reducer;
export const { addPlayer, checkPlayer, checkAllPlayers, updatePlayer } =
  PlayerSlice.actions;
